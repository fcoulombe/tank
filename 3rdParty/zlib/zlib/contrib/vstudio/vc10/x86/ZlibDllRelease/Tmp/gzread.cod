; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\src\kinevox\3rdParty\zlib\zlib\gzread.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ ; `string'
PUBLIC	??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ ; `string'
PUBLIC	??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@	; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ ; `string'
PUBLIC	??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ ; `string'
EXTRN	_memchr:PROC
EXTRN	_strerror:PROC
EXTRN	__errno:PROC
EXTRN	_read:PROC
EXTRN	_close:PROC
;	COMDAT ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
CONST	SEGMENT
??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ DB 'out of ro'
	DB	'om to push characters', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ DB 'requested l'
	DB	'ength does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
CONST	SEGMENT
??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@ DB 'compressed data error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ DB 'internal er'
	DB	'ror: inflate stream corrupt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
CONST	SEGMENT
??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ DB 'unexpected end of f'
	DB	'ile', 00H					; `string'
PUBLIC	_gzclose_r@4
; Function compile flags: /Ogtp
; File c:\src\kinevox\3rdparty\zlib\zlib\gzread.c
;	COMDAT _gzclose_r@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_r@4 PROC					; COMDAT

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 565  :     int ret, err;
; 566  :     gz_statep state;
; 567  : 
; 568  :     /* get internal structure */
; 569  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 0a		 jne	 SHORT $LN3@gzclose_r
$LN8@gzclose_r:

; 570  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 589  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@gzclose_r:

; 571  :     state = (gz_statep)file;
; 572  : 
; 573  :     /* check that we're reading */
; 574  :     if (state->mode != GZ_READ)

  00015	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 575  :         return Z_STREAM_ERROR;

  0001c	75 ed		 jne	 SHORT $LN8@gzclose_r

; 576  : 
; 577  :     /* free memory and close file */
; 578  :     if (state->size) {

  0001e	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00022	74 1e		 je	 SHORT $LN1@gzclose_r

; 579  :         inflateEnd(&(state->strm));

  00024	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _inflateEnd@4

; 580  :         free(state->out);

  0002d	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _free

; 581  :         free(state->in);

  00036	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _free
  0003f	83 c4 08	 add	 esp, 8
$LN1@gzclose_r:

; 582  :     }
; 583  :     err = state->err == Z_BUF_ERROR ? Z_BUF_ERROR : Z_OK;

  00042	53		 push	 ebx
  00043	33 db		 xor	 ebx, ebx
  00045	83 7e 5c fb	 cmp	 DWORD PTR [esi+92], -5	; fffffffbH
  00049	57		 push	 edi
  0004a	0f 95 c3	 setne	 bl

; 584  :     gz_error(state, Z_OK, NULL);

  0004d	6a 00		 push	 0
  0004f	33 c0		 xor	 eax, eax
  00051	8b ce		 mov	 ecx, esi
  00053	4b		 dec	 ebx
  00054	83 e3 fb	 and	 ebx, -5			; fffffffbH
  00057	e8 00 00 00 00	 call	 _gz_error

; 585  :     free(state->path);

  0005c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _free

; 586  :     ret = close(state->fd);

  00065	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _close

; 587  :     free(state);

  0006e	56		 push	 esi
  0006f	8b f8		 mov	 edi, eax
  00071	e8 00 00 00 00	 call	 _free
  00076	83 c4 10	 add	 esp, 16			; 00000010H

; 588  :     return ret ? Z_ERRNO : err;

  00079	85 ff		 test	 edi, edi
  0007b	74 0a		 je	 SHORT $LN6@gzclose_r
  0007d	5f		 pop	 edi
  0007e	5b		 pop	 ebx
  0007f	83 c8 ff	 or	 eax, -1
  00082	5e		 pop	 esi

; 589  : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
$LN6@gzclose_r:
  00087	5f		 pop	 edi

; 588  :     return ret ? Z_ERRNO : err;

  00088	8b c3		 mov	 eax, ebx
  0008a	5b		 pop	 ebx
  0008b	5e		 pop	 esi

; 589  : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_gzclose_r@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_load
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_gz_load PROC						; COMDAT
; _state$ = ebx
; _len$ = edi
; _have$ = esi

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   :     int ret;
; 27   : 
; 28   :     *have = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL6@gz_load:

; 29   :     do {
; 30   :         ret = read(state->fd, buf + *have, len - *have);

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b cf		 mov	 ecx, edi
  00014	2b c8		 sub	 ecx, eax
  00016	03 45 08	 add	 eax, DWORD PTR _buf$[ebp]
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _read
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   :         if (ret <= 0)

  00027	85 c0		 test	 eax, eax
  00029	7e 08		 jle	 SHORT $LN11@gz_load

; 32   :             break;
; 33   :         *have += ret;

  0002b	01 06		 add	 DWORD PTR [esi], eax

; 34   :     } while (*have < len);

  0002d	39 3e		 cmp	 DWORD PTR [esi], edi
  0002f	72 df		 jb	 SHORT $LL6@gz_load

; 35   :     if (ret < 0) {

  00031	85 c0		 test	 eax, eax
$LN11@gz_load:
  00033	79 20		 jns	 SHORT $LN2@gz_load

; 36   :         gz_error(state, Z_ERRNO, zstrerror());

  00035	e8 00 00 00 00	 call	 __errno
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _strerror
  00042	50		 push	 eax
  00043	83 c8 ff	 or	 eax, -1
  00046	8b cb		 mov	 ecx, ebx
  00048	e8 00 00 00 00	 call	 _gz_error
  0004d	83 c4 08	 add	 esp, 8

; 37   :         return -1;

  00050	83 c8 ff	 or	 eax, -1

; 42   : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN2@gz_load:

; 38   :     }
; 39   :     if (ret == 0)

  00055	85 c0		 test	 eax, eax
  00057	75 07		 jne	 SHORT $LN1@gz_load

; 40   :         state->eof = 1;

  00059	c7 43 40 01 00
	00 00		 mov	 DWORD PTR [ebx+64], 1
$LN1@gz_load:

; 41   :     return 0;

  00060	33 c0		 xor	 eax, eax

; 42   : }

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_gz_load ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_avail
_TEXT	SEGMENT
_got$ = -4						; size = 4
_gz_avail PROC						; COMDAT
; _state$ = eax

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d8		 mov	 ebx, eax

; 54   :     unsigned got;
; 55   :     z_streamp strm = &(state->strm);
; 56   : 
; 57   :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00007	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  0000a	85 c0		 test	 eax, eax
  0000c	74 0d		 je	 SHORT $LN7@gz_avail
  0000e	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00011	74 08		 je	 SHORT $LN7@gz_avail
$LN11@gz_avail:

; 58   :         return -1;

  00013	83 c8 ff	 or	 eax, -1
  00016	5b		 pop	 ebx

; 74   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN7@gz_avail:

; 59   :     if (state->eof == 0) {

  0001b	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  0001f	75 44		 jne	 SHORT $LN6@gz_avail

; 60   :         if (strm->avail_in) {       /* copy what's there to the start */

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	8b 7b 68	 mov	 edi, DWORD PTR [ebx+104]
  00026	85 ff		 test	 edi, edi
  00028	74 0f		 je	 SHORT $LN2@gz_avail

; 61   :             unsigned char *p = state->in, *q = strm->next_in;

  0002a	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  0002d	8b 73 64	 mov	 esi, DWORD PTR [ebx+100]
$LL4@gz_avail:

; 62   :             unsigned n = strm->avail_in;
; 63   :             do {
; 64   :                 *p++ = *q++;

  00030	8a 0e		 mov	 cl, BYTE PTR [esi]
  00032	88 08		 mov	 BYTE PTR [eax], cl
  00034	40		 inc	 eax
  00035	46		 inc	 esi

; 65   :             } while (--n);

  00036	4f		 dec	 edi
  00037	75 f7		 jne	 SHORT $LL4@gz_avail
$LN2@gz_avail:

; 66   :         }
; 67   :         if (gz_load(state, state->in + strm->avail_in,
; 68   :                     state->size - strm->avail_in, &got) == -1)

  00039	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]
  0003c	8b 53 24	 mov	 edx, DWORD PTR [ebx+36]
  0003f	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  00042	03 d0		 add	 edx, eax
  00044	2b f8		 sub	 edi, eax
  00046	52		 push	 edx
  00047	8d 75 fc	 lea	 esi, DWORD PTR _got$[ebp]
  0004a	e8 00 00 00 00	 call	 _gz_load
  0004f	83 c4 04	 add	 esp, 4
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	83 f8 ff	 cmp	 eax, -1

; 69   :             return -1;

  00057	74 ba		 je	 SHORT $LN11@gz_avail

; 70   :         strm->avail_in += got;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _got$[ebp]
  0005c	01 43 68	 add	 DWORD PTR [ebx+104], eax

; 71   :         strm->next_in = state->in;

  0005f	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00062	89 4b 64	 mov	 DWORD PTR [ebx+100], ecx
$LN6@gz_avail:

; 72   :     }
; 73   :     return 0;

  00065	33 c0		 xor	 eax, eax
  00067	5b		 pop	 ebx

; 74   : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_gz_avail ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_decomp
_TEXT	SEGMENT
_had$ = -4						; size = 4
_gz_decomp PROC						; COMDAT
; _state$ = ebx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  :     int ret = Z_OK;
; 175  :     unsigned had;
; 176  :     z_streamp strm = &(state->strm);
; 177  : 
; 178  :     /* fill output buffer up to end of deflate stream */
; 179  :     had = strm->avail_out;

  00004	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8d 7b 64	 lea	 edi, DWORD PTR [ebx+100]
  0000c	33 f6		 xor	 esi, esi
  0000e	89 45 fc	 mov	 DWORD PTR _had$[ebp], eax
$LL11@gz_decomp:

; 180  :     do {
; 181  :         /* get more input for inflate() */
; 182  :         if (strm->avail_in == 0 && gz_avail(state) == -1)

  00011	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00015	75 16		 jne	 SHORT $LN22@gz_decomp
  00017	8b c3		 mov	 eax, ebx
  00019	e8 00 00 00 00	 call	 _gz_avail
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	0f 84 c7 00 00
	00		 je	 $LN17@gz_decomp

; 183  :             return -1;
; 184  :         if (strm->avail_in == 0) {

  00027	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0002b	74 55		 je	 SHORT $LN18@gz_decomp
$LN22@gz_decomp:

; 187  :         }
; 188  : 
; 189  :         /* decompress and handle errors */
; 190  :         ret = inflate(strm, Z_NO_FLUSH);

  0002d	6a 00		 push	 0
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _inflate@8
  00035	8b f0		 mov	 esi, eax

; 191  :         if (ret == Z_STREAM_ERROR || ret == Z_NEED_DICT) {

  00037	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003a	0f 84 9a 00 00
	00		 je	 $LN5@gz_decomp
  00040	83 fe 02	 cmp	 esi, 2
  00043	0f 84 91 00 00
	00		 je	 $LN5@gz_decomp

; 195  :         }
; 196  :         if (ret == Z_MEM_ERROR) {

  00049	83 fe fc	 cmp	 esi, -4			; fffffffcH
  0004c	74 4a		 je	 SHORT $LN20@gz_decomp

; 198  :             return -1;
; 199  :         }
; 200  :         if (ret == Z_DATA_ERROR) {              /* deflate stream invalid */

  0004e	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00051	74 62		 je	 SHORT $LN21@gz_decomp

; 203  :             return -1;
; 204  :         }
; 205  :     } while (strm->avail_out && ret != Z_STREAM_END);

  00053	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00057	74 05		 je	 SHORT $LN9@gz_decomp
  00059	83 fe 01	 cmp	 esi, 1
  0005c	75 b3		 jne	 SHORT $LL11@gz_decomp
$LN9@gz_decomp:

; 206  : 
; 207  :     /* update available output */
; 208  :     state->x.have = had - strm->avail_out;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _had$[ebp]
  00061	2b 47 10	 sub	 eax, DWORD PTR [edi+16]
  00064	89 03		 mov	 DWORD PTR [ebx], eax

; 209  :     state->x.next = strm->next_out - state->x.have;

  00066	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00069	2b c8		 sub	 ecx, eax
  0006b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 210  : 
; 211  :     /* if the gzip stream completed successfully, look for another */
; 212  :     if (ret == Z_STREAM_END)

  0006e	83 fe 01	 cmp	 esi, 1
  00071	75 07		 jne	 SHORT $LN1@gz_decomp

; 213  :         state->how = LOOK;

  00073	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], 0
$LN1@gz_decomp:
  0007a	5f		 pop	 edi

; 214  : 
; 215  :     /* good decompression */
; 216  :     return 0;

  0007b	33 c0		 xor	 eax, eax
  0007d	5e		 pop	 esi

; 217  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN18@gz_decomp:

; 185  :             gz_error(state, Z_BUF_ERROR, "unexpected end of file");

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
  00087	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0008c	8b cb		 mov	 ecx, ebx
  0008e	e8 00 00 00 00	 call	 _gz_error
  00093	83 c4 04	 add	 esp, 4

; 186  :             break;

  00096	eb c6		 jmp	 SHORT $LN9@gz_decomp
$LN20@gz_decomp:

; 197  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0009d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000a2	8b cb		 mov	 ecx, ebx
  000a4	e8 00 00 00 00	 call	 _gz_error
  000a9	83 c4 04	 add	 esp, 4
  000ac	5f		 pop	 edi
  000ad	83 c8 ff	 or	 eax, -1
  000b0	5e		 pop	 esi

; 217  : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
$LN21@gz_decomp:

; 201  :             gz_error(state, Z_DATA_ERROR,
; 202  :                      strm->msg == NULL ? "compressed data error" : strm->msg);

  000b5	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  000b8	85 ff		 test	 edi, edi
  000ba	75 05		 jne	 SHORT $LN14@gz_decomp
  000bc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
$LN14@gz_decomp:
  000c1	57		 push	 edi
  000c2	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  000c7	8b cb		 mov	 ecx, ebx
  000c9	e8 00 00 00 00	 call	 _gz_error
  000ce	83 c4 04	 add	 esp, 4
  000d1	5f		 pop	 edi
  000d2	83 c8 ff	 or	 eax, -1
  000d5	5e		 pop	 esi

; 217  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN5@gz_decomp:

; 192  :             gz_error(state, Z_STREAM_ERROR,
; 193  :                      "internal error: inflate stream corrupt");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
  000df	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000e4	8b cb		 mov	 ecx, ebx
  000e6	e8 00 00 00 00	 call	 _gz_error
  000eb	83 c4 04	 add	 esp, 4
$LN17@gz_decomp:

; 194  :             return -1;

  000ee	5f		 pop	 edi
  000ef	83 c8 ff	 or	 eax, -1
  000f2	5e		 pop	 esi

; 217  : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
_gz_decomp ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_look
_TEXT	SEGMENT
tv68 = -4						; size = 4
_gz_look PROC						; COMDAT
; _state$ = esi

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 88   :     z_streamp strm = &(state->strm);
; 89   : 
; 90   :     /* allocate read buffers and inflate memory */
; 91   :     if (state->size == 0) {

  00005	33 db		 xor	 ebx, ebx
  00007	57		 push	 edi
  00008	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0000b	39 5e 1c	 cmp	 DWORD PTR [esi+28], ebx
  0000e	0f 85 ca 00 00
	00		 jne	 $LN7@gz_look

; 92   :         /* allocate buffers */
; 93   :         state->in = malloc(state->want);

  00014	8b 5e 20	 mov	 ebx, DWORD PTR [esi+32]
  00017	53		 push	 ebx
  00018	e8 00 00 00 00	 call	 _malloc
  0001d	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  00020	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 94   :         state->out = malloc(state->want << 1);

  00023	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _malloc

; 95   :         if (state->in == NULL || state->out == NULL) {

  0002c	33 c9		 xor	 ecx, ecx
  0002e	83 c4 08	 add	 esp, 8
  00031	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00034	39 4d fc	 cmp	 DWORD PTR tv68[ebp], ecx
  00037	74 67		 je	 SHORT $LN10@gz_look
  00039	3b c1		 cmp	 eax, ecx
  0003b	74 72		 je	 SHORT $LN9@gz_look

; 102  :         }
; 103  :         state->size = state->want;
; 104  : 
; 105  :         /* allocate inflate memory */
; 106  :         state->strm.zalloc = Z_NULL;
; 107  :         state->strm.zfree = Z_NULL;
; 108  :         state->strm.opaque = Z_NULL;
; 109  :         state->strm.avail_in = 0;
; 110  :         state->strm.next_in = Z_NULL;
; 111  :         if (inflateInit2(&(state->strm), 15 + 16) != Z_OK) {    /* gunzip */

  0003d	6a 38		 push	 56			; 00000038H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_05HBMOAMF@1?42?47?$AA@
  00044	6a 1f		 push	 31			; 0000001fH
  00046	57		 push	 edi
  00047	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  0004a	89 8e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ecx
  00050	89 8e 88 00 00
	00		 mov	 DWORD PTR [esi+136], ecx
  00056	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  0005c	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  0005f	89 0f		 mov	 DWORD PTR [edi], ecx
  00061	e8 00 00 00 00	 call	 _inflateInit2_@16
  00066	85 c0		 test	 eax, eax
  00068	74 72		 je	 SHORT $LN15@gz_look

; 112  :             free(state->out);

  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _free

; 113  :             free(state->in);

  00073	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _free

; 114  :             state->size = 0;
; 115  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  00081	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00086	8b ce		 mov	 ecx, esi
  00088	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0008f	e8 00 00 00 00	 call	 _gz_error
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	5f		 pop	 edi

; 116  :             return -1;

  00098	83 c8 ff	 or	 eax, -1
  0009b	5b		 pop	 ebx

; 164  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN10@gz_look:

; 96   :             if (state->out != NULL)

  000a0	3b c1		 cmp	 eax, ecx
  000a2	74 0b		 je	 SHORT $LN9@gz_look

; 97   :                 free(state->out);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _free
  000aa	83 c4 04	 add	 esp, 4
  000ad	33 c9		 xor	 ecx, ecx
$LN9@gz_look:

; 98   :             if (state->in != NULL)

  000af	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000b2	3b c1		 cmp	 eax, ecx
  000b4	74 09		 je	 SHORT $LN8@gz_look

; 99   :                 free(state->in);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _free
  000bc	83 c4 04	 add	 esp, 4
$LN8@gz_look:

; 100  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000c4	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 _gz_error
  000d0	83 c4 04	 add	 esp, 4
$LN17@gz_look:

; 101  :             return -1;

  000d3	5f		 pop	 edi
  000d4	83 c8 ff	 or	 eax, -1
  000d7	5b		 pop	 ebx

; 164  : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN15@gz_look:

; 98   :             if (state->in != NULL)

  000dc	33 db		 xor	 ebx, ebx
$LN7@gz_look:

; 117  :         }
; 118  :     }
; 119  : 
; 120  :     /* get at least the magic bytes in the input buffer */
; 121  :     if (strm->avail_in < 2) {

  000de	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e1	83 f8 02	 cmp	 eax, 2
  000e4	73 13		 jae	 SHORT $LN4@gz_look

; 122  :         if (gz_avail(state) == -1)

  000e6	8b c6		 mov	 eax, esi
  000e8	e8 00 00 00 00	 call	 _gz_avail
  000ed	83 f8 ff	 cmp	 eax, -1

; 123  :             return -1;

  000f0	74 e1		 je	 SHORT $LN17@gz_look

; 124  :         if (strm->avail_in == 0)

  000f2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f5	3b c3		 cmp	 eax, ebx

; 125  :             return 0;

  000f7	74 70		 je	 SHORT $LN16@gz_look
$LN4@gz_look:

; 126  :     }
; 127  : 
; 128  :     /* look for gzip magic bytes -- if there, do gzip decoding (note: there is
; 129  :        a logical dilemma here when considering the case of a partially written
; 130  :        gzip file, to wit, if a single 31 byte is written, then we cannot tell
; 131  :        whether this is a single-byte file, or just a partially written gzip
; 132  :        file -- for here we assume that if a gzip file is being written, then
; 133  :        the header will be written in a single operation, so that reading a
; 134  :        single byte is sufficient indication that it is not a gzip file) */
; 135  :     if (strm->avail_in > 1 &&
; 136  :             strm->next_in[0] == 31 && strm->next_in[1] == 139) {

  000f9	ba 01 00 00 00	 mov	 edx, 1
  000fe	3b c2		 cmp	 eax, edx
  00100	76 25		 jbe	 SHORT $LN3@gz_look
  00102	8b 07		 mov	 eax, DWORD PTR [edi]
  00104	80 38 1f	 cmp	 BYTE PTR [eax], 31	; 0000001fH
  00107	75 1e		 jne	 SHORT $LN3@gz_look
  00109	80 78 01 8b	 cmp	 BYTE PTR [eax+1], 139	; 0000008bH
  0010d	75 18		 jne	 SHORT $LN3@gz_look

; 137  :         inflateReset(strm);

  0010f	57		 push	 edi
  00110	e8 00 00 00 00	 call	 _inflateReset@4
  00115	5f		 pop	 edi

; 138  :         state->how = GZIP;
; 139  :         state->direct = 0;

  00116	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00119	c7 46 30 02 00
	00 00		 mov	 DWORD PTR [esi+48], 2

; 163  :     return 0;

  00120	33 c0		 xor	 eax, eax
  00122	5b		 pop	 ebx

; 164  : }

  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN3@gz_look:

; 140  :         return 0;
; 141  :     }
; 142  : 
; 143  :     /* no gzip header -- if we were decoding gzip before, then this is trailing
; 144  :        garbage.  Ignore the trailing garbage and finish. */
; 145  :     if (state->direct == 0) {

  00127	39 5e 2c	 cmp	 DWORD PTR [esi+44], ebx
  0012a	75 10		 jne	 SHORT $LN2@gz_look

; 146  :         strm->avail_in = 0;

  0012c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0012f	5f		 pop	 edi

; 147  :         state->eof = 1;
; 148  :         state->x.have = 0;

  00130	89 1e		 mov	 DWORD PTR [esi], ebx
  00132	89 56 40	 mov	 DWORD PTR [esi+64], edx

; 163  :     return 0;

  00135	33 c0		 xor	 eax, eax
  00137	5b		 pop	 ebx

; 164  : }

  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
$LN2@gz_look:

; 149  :         return 0;
; 150  :     }
; 151  : 
; 152  :     /* doing raw i/o, copy any leftover input to output -- this assumes that
; 153  :        the output buffer is larger than the input buffer, which also assures
; 154  :        space for gzungetc() */
; 155  :     state->x.next = state->out;

  0013c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0013f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 156  :     if (strm->avail_in) {

  00142	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00145	3b cb		 cmp	 ecx, ebx
  00147	74 1a		 je	 SHORT $LN1@gz_look

; 157  :         memcpy(state->x.next, strm->next_in, strm->avail_in);

  00149	51		 push	 ecx
  0014a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0014c	51		 push	 ecx
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _memcpy

; 158  :         state->x.have = strm->avail_in;

  00153	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00156	89 16		 mov	 DWORD PTR [esi], edx
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  :         strm->avail_in = 0;

  0015b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0015e	ba 01 00 00 00	 mov	 edx, 1
$LN1@gz_look:

; 160  :     }
; 161  :     state->how = COPY;

  00163	89 56 30	 mov	 DWORD PTR [esi+48], edx

; 162  :     state->direct = 1;

  00166	89 56 2c	 mov	 DWORD PTR [esi+44], edx
$LN16@gz_look:

; 163  :     return 0;

  00169	5f		 pop	 edi
  0016a	33 c0		 xor	 eax, eax
  0016c	5b		 pop	 ebx

; 164  : }

  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
_gz_look ENDP
PUBLIC	_gzdirect@4
; Function compile flags: /Ogtp
;	COMDAT _gzdirect@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzdirect@4 PROC					; COMDAT

; 544  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 545  :     gz_statep state;
; 546  : 
; 547  :     /* get internal structure */
; 548  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 07		 jne	 SHORT $LN2@gzdirect

; 549  :         return 0;

  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi

; 559  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN2@gzdirect:

; 550  :     state = (gz_statep)file;
; 551  : 
; 552  :     /* if the state is not known, but we can find out, then do so (this is
; 553  :        mainly for right after a gzopen() or gzdopen()) */
; 554  :     if (state->mode == GZ_READ && state->how == LOOK && state->x.have == 0)

  00012	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00019	75 10		 jne	 SHORT $LN1@gzdirect
  0001b	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  0001f	75 0a		 jne	 SHORT $LN1@gzdirect
  00021	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00024	75 05		 jne	 SHORT $LN1@gzdirect

; 555  :         (void)gz_look(state);

  00026	e8 00 00 00 00	 call	 _gz_look
$LN1@gzdirect:

; 556  : 
; 557  :     /* return 1 if transparent, 0 if processing a gzip stream */
; 558  :     return state->direct;

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002e	5e		 pop	 esi

; 559  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
_gzdirect@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_fetch
_TEXT	SEGMENT
_gz_fetch PROC						; COMDAT
; _state$ = eax

; 227  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f0		 mov	 esi, eax
$LL13@gz_fetch:

; 228  :     z_streamp strm = &(state->strm);
; 229  : 
; 230  :     do {
; 231  :         switch(state->how) {

  00004	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00007	83 e8 00	 sub	 eax, 0
  0000a	74 26		 je	 SHORT $LN8@gz_fetch
  0000c	48		 dec	 eax
  0000d	74 49		 je	 SHORT $LN5@gz_fetch
  0000f	48		 dec	 eax
  00010	75 30		 jne	 SHORT $LN12@gz_fetch

; 243  :             return 0;
; 244  :         case GZIP:      /* -> GZIP or LOOK (if end of gzip stream) */
; 245  :             strm->avail_out = state->size << 1;

  00012	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00015	03 c0		 add	 eax, eax
  00017	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 246  :             strm->next_out = state->out;

  0001a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 247  :             if (gz_decomp(state) == -1)

  0001d	8b de		 mov	 ebx, esi
  0001f	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
  00022	e8 00 00 00 00	 call	 _gz_decomp
  00027	83 f8 ff	 cmp	 eax, -1
  0002a	75 16		 jne	 SHORT $LN12@gz_fetch
$LN19@gz_fetch:
  0002c	5e		 pop	 esi

; 234  :                 return -1;

  0002d	83 c8 ff	 or	 eax, -1
  00030	5b		 pop	 ebx

; 252  : }

  00031	c3		 ret	 0
$LN8@gz_fetch:

; 232  :         case LOOK:      /* -> LOOK, COPY (only if never GZIP), or GZIP */
; 233  :             if (gz_look(state) == -1)

  00032	e8 00 00 00 00	 call	 _gz_look
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 f0		 je	 SHORT $LN19@gz_fetch

; 235  :             if (state->how == LOOK)

  0003c	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00040	74 11		 je	 SHORT $LN1@gz_fetch
$LN12@gz_fetch:

; 248  :                 return -1;
; 249  :         }
; 250  :     } while (state->x.have == 0 && (!state->eof || strm->avail_in));

  00042	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00045	75 0c		 jne	 SHORT $LN1@gz_fetch
  00047	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0004b	74 b7		 je	 SHORT $LL13@gz_fetch
  0004d	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00051	75 b1		 jne	 SHORT $LL13@gz_fetch
$LN1@gz_fetch:
  00053	5e		 pop	 esi

; 251  :     return 0;

  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx

; 252  : }

  00057	c3		 ret	 0
$LN5@gz_fetch:

; 236  :                 return 0;
; 237  :             break;
; 238  :         case COPY:      /* -> COPY */
; 239  :             if (gz_load(state, state->out, state->size << 1, &(state->x.have))
; 240  :                     == -1)

  00058	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005b	57		 push	 edi
  0005c	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0005f	03 ff		 add	 edi, edi
  00061	52		 push	 edx
  00062	8b de		 mov	 ebx, esi
  00064	e8 00 00 00 00	 call	 _gz_load
  00069	83 c4 04	 add	 esp, 4
  0006c	5f		 pop	 edi
  0006d	83 f8 ff	 cmp	 eax, -1

; 241  :                 return -1;

  00070	74 ba		 je	 SHORT $LN19@gz_fetch

; 242  :             state->x.next = state->out;

  00072	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5e		 pop	 esi

; 251  :     return 0;

  00079	33 c0		 xor	 eax, eax
  0007b	5b		 pop	 ebx

; 252  : }

  0007c	c3		 ret	 0
_gz_fetch ENDP
; Function compile flags: /Ogtp
;	COMDAT _gz_skip
_TEXT	SEGMENT
_len$ = 8						; size = 8
_gz_skip PROC						; COMDAT
; _state$ = esi

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 259  :     unsigned n;
; 260  : 
; 261  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 262  :     while (len)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp+4]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _len$[ebp]
  0000b	8b c7		 mov	 eax, edi
  0000d	0b c3		 or	 eax, ebx
  0000f	74 4b		 je	 SHORT $LN6@gz_skip
$LL7@gz_skip:

; 263  :         /* skip over whatever is in output buffer */
; 264  :         if (state->x.have) {

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	85 c9		 test	 ecx, ecx
  00015	74 27		 je	 SHORT $LN5@gz_skip

; 265  :             n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > len ?
; 266  :                 (unsigned)len : state->x.have;

  00017	33 c0		 xor	 eax, eax
  00019	3b c3		 cmp	 eax, ebx
  0001b	7f 0a		 jg	 SHORT $LN10@gz_skip
  0001d	7c 04		 jl	 SHORT $LN15@gz_skip
  0001f	3b cf		 cmp	 ecx, edi
  00021	77 04		 ja	 SHORT $LN10@gz_skip
$LN15@gz_skip:
  00023	8b c1		 mov	 eax, ecx
  00025	eb 02		 jmp	 SHORT $LN11@gz_skip
$LN10@gz_skip:
  00027	8b c7		 mov	 eax, edi
$LN11@gz_skip:

; 267  :             state->x.have -= n;
; 268  :             state->x.next += n;

  00029	01 46 04	 add	 DWORD PTR [esi+4], eax
  0002c	2b c8		 sub	 ecx, eax
  0002e	89 0e		 mov	 DWORD PTR [esi], ecx

; 269  :             state->x.pos += n;

  00030	33 c9		 xor	 ecx, ecx
  00032	01 46 08	 add	 DWORD PTR [esi+8], eax
  00035	11 4e 0c	 adc	 DWORD PTR [esi+12], ecx

; 270  :             len -= n;

  00038	2b f8		 sub	 edi, eax
  0003a	1b d9		 sbb	 ebx, ecx
  0003c	eb 18		 jmp	 SHORT $LN1@gz_skip
$LN5@gz_skip:

; 271  :         }
; 272  : 
; 273  :         /* output buffer empty -- return if we're at the end of the input */
; 274  :         else if (state->eof && state->strm.avail_in == 0)

  0003e	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00042	74 06		 je	 SHORT $LN3@gz_skip
  00044	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00048	74 12		 je	 SHORT $LN6@gz_skip
$LN3@gz_skip:

; 275  :             break;
; 276  : 
; 277  :         /* need more data to skip -- load up output buffer */
; 278  :         else {
; 279  :             /* get more output, looking for header if required */
; 280  :             if (gz_fetch(state) == -1)

  0004a	8b c6		 mov	 eax, esi
  0004c	e8 00 00 00 00	 call	 _gz_fetch
  00051	83 f8 ff	 cmp	 eax, -1
  00054	74 0c		 je	 SHORT $LN14@gz_skip
$LN1@gz_skip:

; 259  :     unsigned n;
; 260  : 
; 261  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 262  :     while (len)

  00056	8b cf		 mov	 ecx, edi
  00058	0b cb		 or	 ecx, ebx
  0005a	75 b5		 jne	 SHORT $LL7@gz_skip
$LN6@gz_skip:
  0005c	5f		 pop	 edi

; 282  :         }
; 283  :     return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	5b		 pop	 ebx

; 284  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN14@gz_skip:
  00062	5f		 pop	 edi

; 281  :                 return -1;

  00063	83 c8 ff	 or	 eax, -1
  00066	5b		 pop	 ebx

; 284  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_gz_skip ENDP
PUBLIC	_gzgets@12
; Function compile flags: /Ogtp
;	COMDAT _gzgets@12
_TEXT	SEGMENT
_left$ = 8						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_str$ = 16						; size = 4
_len$ = 16						; size = 4
_gzgets@12 PROC						; COMDAT

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 483  :     unsigned left, n;
; 484  :     char *str;
; 485  :     unsigned char *eol;
; 486  :     gz_statep state;
; 487  : 
; 488  :     /* check parameters and get internal structure */
; 489  :     if (file == NULL || buf == NULL || len < 1)

  00005	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00008	57		 push	 edi
  00009	85 f6		 test	 esi, esi
  0000b	0f 84 ef 00 00
	00		 je	 $LN14@gzgets
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00014	85 ff		 test	 edi, edi
  00016	0f 84 e4 00 00
	00		 je	 $LN14@gzgets
  0001c	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0001f	83 fb 01	 cmp	 ebx, 1
  00022	0f 8c d8 00 00
	00		 jl	 $LN14@gzgets

; 491  :     state = (gz_statep)file;
; 492  : 
; 493  :     /* check that we're reading and that there's no (serious) error */
; 494  :     if (state->mode != GZ_READ ||
; 495  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00028	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0002f	0f 85 cb 00 00
	00		 jne	 $LN14@gzgets
  00035	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN13@gzgets
  0003c	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0003f	0f 85 bb 00 00
	00		 jne	 $LN14@gzgets
$LN13@gzgets:

; 496  :         return NULL;
; 497  : 
; 498  :     /* process a skip request */
; 499  :     if (state->seek) {

  00045	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00049	74 20		 je	 SHORT $LN25@gzgets

; 500  :         state->seek = 0;
; 501  :         if (gz_skip(state, state->skip) == -1)

  0004b	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0004e	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00051	50		 push	 eax
  00052	51		 push	 ecx
  00053	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0005a	e8 00 00 00 00	 call	 _gz_skip
  0005f	83 c4 08	 add	 esp, 8
  00062	83 f8 ff	 cmp	 eax, -1

; 502  :             return NULL;

  00065	0f 84 95 00 00
	00		 je	 $LN14@gzgets
$LN25@gzgets:

; 503  :     }
; 504  : 
; 505  :     /* copy output bytes up to new line or len - 1, whichever comes first --
; 506  :        append a terminating zero to the string (we don't check for a zero in
; 507  :        the contents, let the user worry about that) */
; 508  :     str = buf;
; 509  :     left = (unsigned)len - 1;

  0006b	4b		 dec	 ebx
  0006c	89 7d 10	 mov	 DWORD PTR _str$[ebp], edi
  0006f	89 5d 08	 mov	 DWORD PTR _left$[ebp], ebx

; 510  :     if (left) do {

  00072	0f 84 88 00 00
	00		 je	 $LN14@gzgets
$LL8@gzgets:

; 511  :         /* assure that something is in the output buffer */
; 512  :         if (state->x.have == 0 && gz_fetch(state) == -1)

  00078	8b 3e		 mov	 edi, DWORD PTR [esi]
  0007a	85 ff		 test	 edi, edi
  0007c	75 12		 jne	 SHORT $LN24@gzgets
  0007e	8b c6		 mov	 eax, esi
  00080	e8 00 00 00 00	 call	 _gz_fetch
  00085	83 f8 ff	 cmp	 eax, -1
  00088	74 76		 je	 SHORT $LN14@gzgets

; 513  :             return NULL;                /* error */
; 514  :         if (state->x.have == 0) {       /* end of file */

  0008a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008c	85 ff		 test	 edi, edi
  0008e	74 55		 je	 SHORT $LN22@gzgets
$LN24@gzgets:

; 516  :             break;                      /* return what we have */
; 517  :         }
; 518  : 
; 519  :         /* look for end-of-line in current output buffer */
; 520  :         n = state->x.have > left ? left : state->x.have;

  00090	3b fb		 cmp	 edi, ebx
  00092	76 02		 jbe	 SHORT $LN18@gzgets
  00094	8b fb		 mov	 edi, ebx
$LN18@gzgets:

; 521  :         eol = memchr(state->x.next, '\n', n);

  00096	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00099	57		 push	 edi
  0009a	6a 0a		 push	 10			; 0000000aH
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 _memchr
  000a2	8b d8		 mov	 ebx, eax
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 522  :         if (eol != NULL)

  000a7	85 db		 test	 ebx, ebx
  000a9	74 06		 je	 SHORT $LN3@gzgets

; 523  :             n = (unsigned)(eol - state->x.next) + 1;

  000ab	8b fb		 mov	 edi, ebx
  000ad	2b 7e 04	 sub	 edi, DWORD PTR [esi+4]
  000b0	47		 inc	 edi
$LN3@gzgets:

; 524  : 
; 525  :         /* copy through end-of-line, or remainder if not found */
; 526  :         memcpy(buf, state->x.next, n);

  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000b7	57		 push	 edi
  000b8	50		 push	 eax
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _memcpy

; 527  :         state->x.have -= n;

  000bf	29 3e		 sub	 DWORD PTR [esi], edi

; 528  :         state->x.next += n;

  000c1	01 7e 04	 add	 DWORD PTR [esi+4], edi

; 529  :         state->x.pos += n;
; 530  :         left -= n;

  000c4	8b 45 08	 mov	 eax, DWORD PTR _left$[ebp]
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000cd	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 531  :         buf += n;

  000d1	01 7d 0c	 add	 DWORD PTR _buf$[ebp], edi
  000d4	2b c7		 sub	 eax, edi
  000d6	89 45 08	 mov	 DWORD PTR _left$[ebp], eax

; 532  :     } while (left && eol == NULL);

  000d9	85 c0		 test	 eax, eax
  000db	74 0f		 je	 SHORT $LN2@gzgets
  000dd	85 db		 test	 ebx, ebx
  000df	75 0b		 jne	 SHORT $LN2@gzgets
  000e1	8b d8		 mov	 ebx, eax
  000e3	eb 93		 jmp	 SHORT $LL8@gzgets
$LN22@gzgets:

; 515  :             state->past = 1;            /* read past end */

  000e5	c7 46 44 01 00
	00 00		 mov	 DWORD PTR [esi+68], 1
$LN2@gzgets:

; 533  : 
; 534  :     /* return terminated string, or if nothing, end of file */
; 535  :     if (buf == str)

  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000ef	8b 45 10	 mov	 eax, DWORD PTR _str$[ebp]
  000f2	3b c8		 cmp	 ecx, eax

; 536  :         return NULL;

  000f4	74 0a		 je	 SHORT $LN14@gzgets

; 537  :     buf[0] = 0;

  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	c6 01 00	 mov	 BYTE PTR [ecx], 0
  000fb	5b		 pop	 ebx

; 538  :     return str;
; 539  : }

  000fc	5d		 pop	 ebp
  000fd	c2 0c 00	 ret	 12			; 0000000cH
$LN14@gzgets:
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi

; 490  :         return NULL;

  00102	33 c0		 xor	 eax, eax
  00104	5b		 pop	 ebx

; 538  :     return str;
; 539  : }

  00105	5d		 pop	 ebp
  00106	c2 0c 00	 ret	 12			; 0000000cH
_gzgets@12 ENDP
_TEXT	ENDS
PUBLIC	_gzungetc@8
; Function compile flags: /Ogtp
;	COMDAT _gzungetc@8
_TEXT	SEGMENT
_c$ = 8							; size = 4
_file$ = 12						; size = 4
_gzungetc@8 PROC					; COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 422  :     gz_statep state;
; 423  : 
; 424  :     /* get internal structure */
; 425  :     if (file == NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	3b f7		 cmp	 esi, edi
  0000c	75 09		 jne	 SHORT $LN11@gzungetc
$LN9@gzungetc:
  0000e	5f		 pop	 edi

; 426  :         return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	5e		 pop	 esi

; 474  :     return c;
; 475  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN11@gzungetc:

; 427  :     state = (gz_statep)file;
; 428  : 
; 429  :     /* check that we're reading and that there's no (serious) error */
; 430  :     if (state->mode != GZ_READ ||
; 431  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00017	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0001e	75 ee		 jne	 SHORT $LN9@gzungetc
  00020	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00023	3b c7		 cmp	 eax, edi
  00025	74 05		 je	 SHORT $LN10@gzungetc
  00027	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0002a	75 e2		 jne	 SHORT $LN9@gzungetc
$LN10@gzungetc:
  0002c	53		 push	 ebx

; 432  :         return -1;
; 433  : 
; 434  :     /* process a skip request */
; 435  :     if (state->seek) {

  0002d	83 cb ff	 or	 ebx, -1
  00030	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00033	74 17		 je	 SHORT $LN7@gzungetc

; 436  :         state->seek = 0;
; 437  :         if (gz_skip(state, state->skip) == -1)

  00035	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00038	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00040	e8 00 00 00 00	 call	 _gz_skip
  00045	83 c4 08	 add	 esp, 8
  00048	3b c3		 cmp	 eax, ebx

; 438  :             return -1;

  0004a	74 4d		 je	 SHORT $LN18@gzungetc
$LN7@gzungetc:

; 439  :     }
; 440  : 
; 441  :     /* can't push EOF */
; 442  :     if (c < 0)

  0004c	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  0004f	3b c7		 cmp	 eax, edi

; 443  :         return -1;

  00051	7c 46		 jl	 SHORT $LN18@gzungetc

; 444  : 
; 445  :     /* if output buffer empty, put byte at end (allows more pushing) */
; 446  :     if (state->x.have == 0) {

  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 447  :         state->x.have = 1;
; 448  :         state->x.next = state->out + (state->size << 1) - 1;

  00055	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00058	3b cf		 cmp	 ecx, edi
  0005a	75 22		 jne	 SHORT $LN5@gzungetc
  0005c	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005f	8d 4c 51 ff	 lea	 ecx, DWORD PTR [ecx+edx*2-1]
  00063	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00069	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 449  :         state->x.next[0] = c;

  0006c	88 01		 mov	 BYTE PTR [ecx], al

; 472  :     state->x.pos--;

  0006e	01 5e 08	 add	 DWORD PTR [esi+8], ebx
  00071	89 7e 44	 mov	 DWORD PTR [esi+68], edi
  00074	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  00077	5b		 pop	 ebx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi

; 474  :     return c;
; 475  : }

  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
$LN5@gzungetc:

; 450  :         state->x.pos--;
; 451  :         state->past = 0;
; 452  :         return c;
; 453  :     }
; 454  : 
; 455  :     /* if no room, give up (must have already done a gzungetc()) */
; 456  :     if (state->x.have == (state->size << 1)) {

  0007e	8d 3c 12	 lea	 edi, DWORD PTR [edx+edx]
  00081	3b cf		 cmp	 ecx, edi
  00083	75 1d		 jne	 SHORT $LN4@gzungetc

; 457  :         gz_error(state, Z_DATA_ERROR, "out of room to push characters");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
  0008a	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0008f	8b ce		 mov	 ecx, esi
  00091	e8 00 00 00 00	 call	 _gz_error
  00096	83 c4 04	 add	 esp, 4
$LN18@gzungetc:

; 458  :         return -1;

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 474  :     return c;
; 475  : }

  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN4@gzungetc:

; 459  :     }
; 460  : 
; 461  :     /* slide output data if needed and insert byte before existing data */
; 462  :     if (state->x.next == state->out) {

  000a2	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  000a5	39 7e 04	 cmp	 DWORD PTR [esi+4], edi
  000a8	75 1b		 jne	 SHORT $LN3@gzungetc

; 463  :         unsigned char *src = state->out + state->x.have;

  000aa	03 cf		 add	 ecx, edi

; 464  :         unsigned char *dest = state->out + (state->size << 1);

  000ac	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]

; 465  :         while (src > state->out)

  000af	3b cf		 cmp	 ecx, edi
  000b1	76 0f		 jbe	 SHORT $LN1@gzungetc
$LL2@gzungetc:

; 466  :             *--dest = *--src;

  000b3	8a 59 ff	 mov	 bl, BYTE PTR [ecx-1]
  000b6	49		 dec	 ecx
  000b7	4a		 dec	 edx
  000b8	88 1a		 mov	 BYTE PTR [edx], bl
  000ba	3b 4e 28	 cmp	 ecx, DWORD PTR [esi+40]
  000bd	77 f4		 ja	 SHORT $LL2@gzungetc

; 465  :         while (src > state->out)

  000bf	83 cb ff	 or	 ebx, -1
$LN1@gzungetc:

; 467  :         state->x.next = dest;

  000c2	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN3@gzungetc:

; 468  :     }
; 469  :     state->x.have++;
; 470  :     state->x.next--;

  000c5	01 5e 04	 add	 DWORD PTR [esi+4], ebx
  000c8	ff 06		 inc	 DWORD PTR [esi]
  000ca	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 471  :     state->x.next[0] = c;

  000cd	88 01		 mov	 BYTE PTR [ecx], al

; 472  :     state->x.pos--;

  000cf	01 5e 08	 add	 DWORD PTR [esi+8], ebx

; 473  :     state->past = 0;

  000d2	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000d9	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  000dc	5b		 pop	 ebx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi

; 474  :     return c;
; 475  : }

  000df	5d		 pop	 ebp
  000e0	c2 08 00	 ret	 8
_gzungetc@8 ENDP
_TEXT	ENDS
PUBLIC	_gzread@12
; Function compile flags: /Ogtp
;	COMDAT _gzread@12
_TEXT	SEGMENT
_n$ = 8							; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_got$ = 16						; size = 4
_len$ = 16						; size = 4
_gzread@12 PROC						; COMDAT

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 292  :     unsigned got, n;
; 293  :     gz_statep state;
; 294  :     z_streamp strm;
; 295  : 
; 296  :     /* get internal structure */
; 297  :     if (file == NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	75 08		 jne	 SHORT $LN22@gzread
$LN20@gzread:

; 298  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5b		 pop	 ebx

; 378  : }

  0000f	5d		 pop	 ebp
  00010	c2 0c 00	 ret	 12			; 0000000cH
$LN22@gzread:

; 299  :     state = (gz_statep)file;
; 300  :     strm = &(state->strm);
; 301  : 
; 302  :     /* check that we're reading and that there's no (serious) error */
; 303  :     if (state->mode != GZ_READ ||
; 304  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00013	81 7b 10 4f 1c
	00 00		 cmp	 DWORD PTR [ebx+16], 7247 ; 00001c4fH
  0001a	75 ef		 jne	 SHORT $LN20@gzread
  0001c	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  0001f	85 c0		 test	 eax, eax
  00021	74 05		 je	 SHORT $LN21@gzread
  00023	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00026	75 e3		 jne	 SHORT $LN20@gzread
$LN21@gzread:
  00028	57		 push	 edi

; 305  :         return -1;
; 306  : 
; 307  :     /* since an int is returned, make sure len fits in one, otherwise return
; 308  :        with an error (this avoids the flaw in the interface) */
; 309  :     if ((int)len < 0) {

  00029	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  0002c	85 ff		 test	 edi, edi
  0002e	79 1d		 jns	 SHORT $LN37@gzread

; 310  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
  00035	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 _gz_error
  00041	83 c4 04	 add	 esp, 4
  00044	5f		 pop	 edi

; 311  :         return -1;

  00045	83 c8 ff	 or	 eax, -1
  00048	5b		 pop	 ebx

; 378  : }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN37@gzread:

; 312  :     }
; 313  : 
; 314  :     /* if len is zero, avoid unnecessary operations */
; 315  :     if (len == 0)

  0004d	75 08		 jne	 SHORT $LN18@gzread

; 316  :         return 0;

  0004f	5f		 pop	 edi
  00050	33 c0		 xor	 eax, eax
  00052	5b		 pop	 ebx

; 378  : }

  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
$LN18@gzread:

; 317  : 
; 318  :     /* process a skip request */
; 319  :     if (state->seek) {

  00057	83 7b 58 00	 cmp	 DWORD PTR [ebx+88], 0
  0005b	56		 push	 esi
  0005c	74 22		 je	 SHORT $LN32@gzread

; 320  :         state->seek = 0;
; 321  :         if (gz_skip(state, state->skip) == -1)

  0005e	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00061	8b 4b 50	 mov	 ecx, DWORD PTR [ebx+80]
  00064	50		 push	 eax
  00065	51		 push	 ecx
  00066	8b f3		 mov	 esi, ebx
  00068	c7 43 58 00 00
	00 00		 mov	 DWORD PTR [ebx+88], 0
  0006f	e8 00 00 00 00	 call	 _gz_skip
  00074	83 c4 08	 add	 esp, 8
  00077	83 f8 ff	 cmp	 eax, -1

; 322  :             return -1;

  0007a	0f 84 eb 00 00
	00		 je	 $LN31@gzread
$LN32@gzread:

; 323  :     }
; 324  : 
; 325  :     /* get len bytes to buf, or less than len if at the end */
; 326  :     got = 0;

  00080	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _got$[ebp], 0
$LL15@gzread:

; 327  :     do {
; 328  :         /* first just try copying data from the output buffer */
; 329  :         if (state->x.have) {

  00087	8b 33		 mov	 esi, DWORD PTR [ebx]
  00089	85 f6		 test	 esi, esi
  0008b	74 33		 je	 SHORT $LN12@gzread

; 330  :             n = state->x.have > len ? len : state->x.have;

  0008d	3b f7		 cmp	 esi, edi
  0008f	76 02		 jbe	 SHORT $LN25@gzread
  00091	8b f7		 mov	 esi, edi
$LN25@gzread:

; 331  :             memcpy(buf, state->x.next, n);

  00093	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00096	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00099	56		 push	 esi
  0009a	52		 push	 edx
  0009b	50		 push	 eax
  0009c	89 75 08	 mov	 DWORD PTR _n$[ebp], esi
  0009f	e8 00 00 00 00	 call	 _memcpy

; 332  :             state->x.next += n;

  000a4	01 73 04	 add	 DWORD PTR [ebx+4], esi

; 333  :             state->x.have -= n;

  000a7	29 33		 sub	 DWORD PTR [ebx], esi

; 366  :             state->x.have = 0;
; 367  :         }
; 368  : 
; 369  :         /* update progress */
; 370  :         len -= n;
; 371  :         buf = (char *)buf + n;

  000a9	01 75 0c	 add	 DWORD PTR _buf$[ebp], esi

; 372  :         got += n;

  000ac	01 75 10	 add	 DWORD PTR _got$[ebp], esi
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b2	2b fe		 sub	 edi, esi

; 373  :         state->x.pos += n;

  000b4	01 73 08	 add	 DWORD PTR [ebx+8], esi
  000b7	83 53 0c 00	 adc	 DWORD PTR [ebx+12], 0
  000bb	e9 88 00 00 00	 jmp	 $LN14@gzread
$LN12@gzread:

; 334  :         }
; 335  : 
; 336  :         /* output buffer empty -- return if we're at the end of the input */
; 337  :         else if (state->eof && strm->avail_in == 0) {

  000c0	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  000c4	74 0a		 je	 SHORT $LN10@gzread
  000c6	83 7b 68 00	 cmp	 DWORD PTR [ebx+104], 0
  000ca	0f 84 8a 00 00
	00		 je	 $LN28@gzread
$LN10@gzread:

; 338  :             state->past = 1;        /* tried to read past end */
; 339  :             break;
; 340  :         }
; 341  : 
; 342  :         /* need output data -- for small len or new stream load up our output
; 343  :            buffer */
; 344  :         else if (state->how == LOOK || len < (state->size << 1)) {

  000d0	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000d3	85 c0		 test	 eax, eax
  000d5	74 65		 je	 SHORT $LN7@gzread
  000d7	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  000da	03 c9		 add	 ecx, ecx
  000dc	3b f9		 cmp	 edi, ecx
  000de	72 5c		 jb	 SHORT $LN7@gzread

; 348  :             continue;       /* no progress yet -- go back to copy above */
; 349  :             /* the copy above assures that we will leave with space in the
; 350  :                output buffer, allowing at least one gzungetc() to succeed */
; 351  :         }
; 352  : 
; 353  :         /* large len -- read directly into user buffer */
; 354  :         else if (state->how == COPY) {      /* read directly */

  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 28		 jne	 SHORT $LN4@gzread

; 355  :             if (gz_load(state, buf, len, &n) == -1)

  000e5	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000e8	52		 push	 edx
  000e9	8d 75 08	 lea	 esi, DWORD PTR _n$[ebp]
  000ec	e8 00 00 00 00	 call	 _gz_load
  000f1	83 c4 04	 add	 esp, 4
  000f4	83 f8 ff	 cmp	 eax, -1
  000f7	74 72		 je	 SHORT $LN31@gzread

; 356  :                 return -1;
; 357  :         }
; 358  : 
; 359  :         /* large len -- decompress directly into user buffer */
; 360  :         else {  /* state->how == GZIP */

  000f9	8b 75 08	 mov	 esi, DWORD PTR _n$[ebp]

; 366  :             state->x.have = 0;
; 367  :         }
; 368  : 
; 369  :         /* update progress */
; 370  :         len -= n;
; 371  :         buf = (char *)buf + n;

  000fc	01 75 0c	 add	 DWORD PTR _buf$[ebp], esi

; 372  :         got += n;

  000ff	01 75 10	 add	 DWORD PTR _got$[ebp], esi
  00102	2b fe		 sub	 edi, esi

; 373  :         state->x.pos += n;

  00104	01 73 08	 add	 DWORD PTR [ebx+8], esi
  00107	83 53 0c 00	 adc	 DWORD PTR [ebx+12], 0
  0010b	eb 3b		 jmp	 SHORT $LN14@gzread
$LN4@gzread:

; 361  :             strm->avail_out = len;
; 362  :             strm->next_out = buf;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00110	89 7b 74	 mov	 DWORD PTR [ebx+116], edi
  00113	89 43 70	 mov	 DWORD PTR [ebx+112], eax

; 363  :             if (gz_decomp(state) == -1)

  00116	e8 00 00 00 00	 call	 _gz_decomp
  0011b	83 f8 ff	 cmp	 eax, -1
  0011e	74 4b		 je	 SHORT $LN31@gzread

; 364  :                 return -1;
; 365  :             n = state->x.have;

  00120	8b 33		 mov	 esi, DWORD PTR [ebx]

; 366  :             state->x.have = 0;
; 367  :         }
; 368  : 
; 369  :         /* update progress */
; 370  :         len -= n;
; 371  :         buf = (char *)buf + n;

  00122	01 75 0c	 add	 DWORD PTR _buf$[ebp], esi

; 372  :         got += n;

  00125	01 75 10	 add	 DWORD PTR _got$[ebp], esi
  00128	2b fe		 sub	 edi, esi

; 373  :         state->x.pos += n;

  0012a	01 73 08	 add	 DWORD PTR [ebx+8], esi
  0012d	89 75 08	 mov	 DWORD PTR _n$[ebp], esi
  00130	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00136	83 53 0c 00	 adc	 DWORD PTR [ebx+12], 0
  0013a	eb 0c		 jmp	 SHORT $LN14@gzread
$LN7@gzread:

; 345  :             /* get more output, looking for header if required */
; 346  :             if (gz_fetch(state) == -1)

  0013c	8b c3		 mov	 eax, ebx
  0013e	e8 00 00 00 00	 call	 _gz_fetch
  00143	83 f8 ff	 cmp	 eax, -1
  00146	74 23		 je	 SHORT $LN31@gzread
$LN14@gzread:

; 374  :     } while (len);

  00148	85 ff		 test	 edi, edi
  0014a	0f 85 37 ff ff
	ff		 jne	 $LL15@gzread

; 375  : 
; 376  :     /* return number of bytes read into user buffer (will fit in int) */
; 377  :     return (int)got;

  00150	8b 45 10	 mov	 eax, DWORD PTR _got$[ebp]
  00153	5e		 pop	 esi
  00154	5f		 pop	 edi
  00155	5b		 pop	 ebx

; 378  : }

  00156	5d		 pop	 ebp
  00157	c2 0c 00	 ret	 12			; 0000000cH
$LN28@gzread:

; 375  : 
; 376  :     /* return number of bytes read into user buffer (will fit in int) */
; 377  :     return (int)got;

  0015a	8b 45 10	 mov	 eax, DWORD PTR _got$[ebp]
  0015d	5e		 pop	 esi
  0015e	5f		 pop	 edi
  0015f	c7 43 44 01 00
	00 00		 mov	 DWORD PTR [ebx+68], 1
  00166	5b		 pop	 ebx

; 378  : }

  00167	5d		 pop	 ebp
  00168	c2 0c 00	 ret	 12			; 0000000cH
$LN31@gzread:
  0016b	5e		 pop	 esi
  0016c	5f		 pop	 edi

; 347  :                 return -1;

  0016d	83 c8 ff	 or	 eax, -1
  00170	5b		 pop	 ebx

; 378  : }

  00171	5d		 pop	 ebp
  00172	c2 0c 00	 ret	 12			; 0000000cH
_gzread@12 ENDP
PUBLIC	_gzgetc@4
; Function compile flags: /Ogtp
;	COMDAT _gzgetc@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_gzgetc@4 PROC						; COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  :     int ret;
; 386  :     unsigned char buf[1];
; 387  :     gz_statep state;
; 388  : 
; 389  :     /* get internal structure */
; 390  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax

; 391  :         return -1;

  00008	74 4f		 je	 SHORT $LN2@gzgetc

; 392  :     state = (gz_statep)file;
; 393  : 
; 394  :     /* check that we're reading and that there's no (serious) error */
; 395  :     if (state->mode != GZ_READ ||
; 396  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000a	81 78 10 4f 1c
	00 00		 cmp	 DWORD PTR [eax+16], 7247 ; 00001c4fH
  00011	75 46		 jne	 SHORT $LN2@gzgetc
  00013	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00016	85 c9		 test	 ecx, ecx
  00018	74 05		 je	 SHORT $LN3@gzgetc
  0001a	83 f9 fb	 cmp	 ecx, -5			; fffffffbH
  0001d	75 3a		 jne	 SHORT $LN2@gzgetc
$LN3@gzgetc:

; 398  : 
; 399  :     /* try output buffer (no need to check for skip request) */
; 400  :     if (state->x.have) {

  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	85 c9		 test	 ecx, ecx
  00023	74 1b		 je	 SHORT $LN1@gzgetc

; 401  :         state->x.have--;

  00025	49		 dec	 ecx

; 402  :         state->x.pos++;

  00026	83 40 08 01	 add	 DWORD PTR [eax+8], 1
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 403  :         return *(state->x.next)++;

  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	83 50 0c 00	 adc	 DWORD PTR [eax+12], 0
  00033	8a 11		 mov	 dl, BYTE PTR [ecx]
  00035	41		 inc	 ecx
  00036	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00039	0f b6 c2	 movzx	 eax, dl

; 409  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN1@gzgetc:

; 404  :     }
; 405  : 
; 406  :     /* nothing there -- try gzread() */
; 407  :     ret = gzread(file, buf, 1);

  00040	6a 01		 push	 1
  00042	8d 4d 0b	 lea	 ecx, DWORD PTR _buf$[ebp]
  00045	51		 push	 ecx
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _gzread@12

; 408  :     return ret < 1 ? -1 : buf[0];

  0004c	83 f8 01	 cmp	 eax, 1
  0004f	7c 08		 jl	 SHORT $LN2@gzgetc
  00051	0f b6 45 0b	 movzx	 eax, BYTE PTR _buf$[ebp]

; 409  : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN2@gzgetc:

; 397  :         return -1;

  00059	83 c8 ff	 or	 eax, -1

; 409  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_gzgetc@4 ENDP
_TEXT	ENDS
PUBLIC	_gzgetc_@4
; Function compile flags: /Ogtp
;	COMDAT _gzgetc_@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzgetc_@4 PROC						; COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : }

  00003	5d		 pop	 ebp

; 414  :     return gzgetc(file);

  00004	e9 00 00 00 00	 jmp	 _gzgetc@4
_gzgetc_@4 ENDP
_TEXT	ENDS
END
